version: '3'

# networks is required because of OpenVPN Client problem
networks:
  default:
    driver: bridge
    ipam:
      config:
        - subnet: 172.177.57.0/24

volumes:
  vol_traefik: {}
  vol_gogs_db_data: {}
  vol_gogs_data: {}
  vol_drone_db_data: {}
  vol_drone_data: {}
  vol_odoo_data: {}
  vol_odoo_db_data: {}
  vol_taiga_rabbit_data: {}
  vol_taiga_db_data: {}
  vol_taiga_back_media: {}

services:

  gogs_db:
    env_file: .env
    restart: always
    image: postgres:latest
    ports:
      - 5432
    volumes:
      - vol_gogs_db_data:/var/lib/postgresql/data/

  gogs:
    env_file: .env
    restart: always
    image: gogs/gogs:latest
    depends_on:
      - gogs_db
    expose:
      - ${GOGS_PORT}
    volumes:
      - vol_gogs_data:/data
    labels:
      - traefik.port=3000
      - traefik.enable=true
      - traefik.backend.domain=${GOGS_DOMAIN}
      - traefik.frontend.rule=Host:${GOGS_DOMAIN}

  drone_db:
    env_file: .env
    restart: always
    image: postgres:latest
    ports:
      - 5432
    volumes:
      - vol_drone_db_data:/var/lib/postgresql/data/

  drone:
    env_file: .env
    restart: always
    image: drone/drone:latest
    depends_on:
      - drone_db
      - gogs
    expose:
      - ${DRONE_PORT}
    environment:
      - DRONE_GOGS_SERVER=http://gogs:${GOGS_PORT}
    volumes:
      - vol_drone_data:/var/lib/drone
    labels:
      - traefik.enable=true
      - traefik.backend.domain=${DRONE_SERVER_HOST}
      - traefik.frontend.rule=Host:${DRONE_SERVER_HOST}

  drone_runner:
    env_file: .env
    restart: always
    image: drone/drone-runner-docker:latest
    depends_on:
      - drone
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock

  odoo_db:
    env_file: .env
    restart: always
    image: postgres:latest
    ports:
      - 5432
    environment:
      - POSTGRES_DB=postgres
    volumes:
      - vol_odoo_db_data:/var/lib/postgresql/data/

  odoo:
    image: odoo:latest
    depends_on:
      - odoo_db
    expose:
      - ${ODOO_PORT}
    environment:
      - HOST=odoo_db
      - USER=$POSTGRES_USER
      - PASSWORD=$POSTGRES_PASSWORD
    volumes:
      - vol_odoo_data:/var/lib/odoo
      # - ./config:/etc/odoo
      # - ./addons:/mnt/extra-addons
    labels:
      - traefik.enable=true
      - traefik.backend.domain=${ODOO_HOST}
      - traefik.frontend.rule=Host:${ODOO_HOST}

  taiga_rabbit:
    env_file: .env
    restart: always
    image: rabbitmq:latest
    ports:
      - 5672
    volumes:
      - vol_taiga_rabbit_data:/data

  taiga_db:
    env_file: .env
    restart: always
    image: postgres:latest
    ports:
      - 5432
    volumes:
      - vol_taiga_db_data:/var/lib/postgresql/data/

  taiga_back:
    env_file: .env
    restart: always
    build:
      context: taiga/back
      args:
        TAIGA_VERSION: $TAIGA_VERSION
    command: gunicorn -b 0.0.0.0:${TAIGA_BACK_PORT} taiga.wsgi
    expose:
      - ${TAIGA_BACK_PORT}
    environment:
      - POSTGRES_HOST=taiga_db
      - RABBIT_HOST=taiga_rabbit
    depends_on:
      - taiga_db
      - taiga_rabbit
    labels:
      - traefik.enable=true
      - traefik.backend.domain=${TAIGA_BACK_HOST}
      - traefik.frontend.rule=Host:${TAIGA_BACK_HOST}
    volumes:
      - vol_taiga_back_media:/srv/taiga/back/media/user

  taiga_events:
    env_file: .env
    restart: always
    build:
      context: taiga/events
      args:
        RABBIT_HOST: taiga_rabbit
        RABBITMQ_DEFAULT_VHOST: $RABBITMQ_DEFAULT_VHOST
        TAIGA_EVENTS_PORT: $TAIGA_EVENTS_PORT
        TAIGA_SECRET: $TAIGA_SECRET
    command: coffee index.coffee
    expose:
      - ${TAIGA_EVENTS_PORT}
    depends_on:
      - taiga_rabbit
    labels:
      - traefik.enable=true
      - traefik.backend.domain=${TAIGA_EVENTS_HOST}
      - traefik.frontend.rule=Host:${TAIGA_EVENTS_HOST}

  taiga_front:
    env_file: .env
    restart: always
    command: nginx -g 'daemon off;'
    build:
      context: taiga/front
      args:
        TAIGA_SCHEME: $TAIGA_SCHEME
        TAIGA_VERSION: $TAIGA_VERSION
        TAIGA_BACK_HOST: $TAIGA_BACK_HOST
        TAIGA_EVENTS_HOST: $TAIGA_EVENTS_HOST
        TAIGA_EVENTS_SCHEME: $TAIGA_EVENTS_SCHEME
    expose:
      - ${TAIGA_FRONT_PORT}
    depends_on:
      - taiga_rabbit
      - taiga_db
    labels:
      - traefik.enable=true
      - traefik.backend.domain=${TAIGA_FRONT_HOST}
      - traefik.frontend.rule=Host:${TAIGA_FRONT_HOST}

  traefik:
    env_file: .env
    restart: always
    build: traefik
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - vol_traefik:/etc/traefik/acme/ # Defined in traefik/traefik.toml
    ports:
      - 80:80
      - 443:443
      - 8080:8080
